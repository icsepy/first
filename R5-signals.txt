R5-signals
void(*signal(int signo,void(*func)(int)))(int);

if(pid==0)
signal(SIGHUP, sighup);

else
kill(pid,SIGHUP);
sleep(3);

void sighup()
{
signal(SIGHUP, sighup);
printf(received)
}
___________________________________________________
void siginthandler()
{
printf(interrupt was passed);
exit(0);
}

main(){
signal(SIGINT, siginthandler);
while(1)
{
print
sleep(1);
}
return 0;
}
____________________________________________________
round robin
struct Process{int id; int arrival_time; int burst_time; int rem_time;}

void child_process(struct Process *process){
printf( starting process->id)
while(process remaining time>0)
sleep(burst_time)
remaining time-=burst time
____________________________________________________
SJRT
Process{int id; int arr_time; int burst_time; int rem_time;}
sleep(burst_time)
process rem time -= burst time

waitpid(chid_pids[i],&status, 0);


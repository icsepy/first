R8
int shmid;
char *shared_memory;
key_t key=1234;

shmid=shmget(key, shared_memory_size, ipc_creat | 0666)
shmdt(shared_memory);
shmctl(shmid, IPC_RMID, NULL);
__________________________________________________________

signal.h
stdio.h
stdlib.h
string.h
sys/ipc.h
sys/shm.h
sys/types.h
unistd.h
filled 0
ready 1
notready -1

struct memory{
char buff[100];
int status, pid1, pid2);};
struct memory *shmptr;

void handler(int signum){
if(signum==SIGUSR1){
puts(shmptr->buff);}

if(signum==SIGUSR2){
puts(shmptr->buff);}



int main(){
int pid=getpid();
int shmid;
int key=123;
shmid = shmget(key, sizef(struct memory), IPC_CREAT | 0666);
shmptr = (memory *)shmat(shmid, NULL, 0);
shmptr->pid1 = pid;
shmptr->status = notready;
signal(SIGUSR1,handler);
while(1){
fgets(shmptr->buff, 100,stdin);
shmptf->status = filled;
kill(shmptr->pid2, SIGUSR2);}
shmdt((void*)shmptr);
shmctl(shmid, IPC_RMID, NULL);
}

int main(){
int pid=getpid();
int shmid=shmget(key,sizeof(struct memory), IPC_CREAT|0666), key=123;
shmptr=(struct memory*) shmat(shmid, NULL,0);
shmptr->pid2=pid;
shmptr->status=notready;
signal(SIGUSR2, handler);
{
fgets(shmptr->buff, 100, stdin);
shmptr->status=ready;
kill(shmptr->pid1, SIGUSR1);
while(shmptr->status==ready)
}
shmdt((void*)shmptr);
}
_______________________________________________________________________________
stdio.h
stdlib.h
unistd.h
pthread.h
semaphore.h

sem_t room;
sem_t chopstick[5];

void *philosopher(void *num)P
int phil=*(int *)num;
sem_wait(&room);
sem_wait(&chopstick[phil]);
sem_wait(&chopstick[phil+1 %5]);
eat(phil)
sleep1;
sem_post(&chopstick[(phil+1)]%5);
sem_post(&chopstic[phil]);
xdm-post(&room);

void eat{}

int main(){
int i,a[5];
pthread_t tid[5];
sem_init(&room,0,4);
for(i=0;i<5;i++);
sem_init(&chopstick[i],0,1);
a[i]=i;
pthread_create(&tid[i], NULL,philosopher, (void*)&a[i]);
pthread_join(tid[i],NULL);}
____________________________________________________________
code - (void*)main
heap - (void*)malloc(1)
stack -(void*)&x
